@inherits LayoutComponentBase;
@* @inject IEntryService entryService; *@



<div class="navbar fixed-top text-white">

    
            <img src="\Pix.png" alt="Alternate Text" class="logo" />
        
    

    <div class="search-box">
        <div class="form-outline">
            <input type="search"
                   class="form-control small"
                   @bind-value="SearchText"
                   @bind-value:event="oninput"
                   @onkeypress="@SearchKeyDown"
                   @onfocusout="@OnSearchFocusOut"
                   placeholder="Sözlük içerisinde ara" />

            <button type="button" class="btn btn-sozluk btn-success"
                    @onclick="@OnSearchAsync"
                    @onfocusout="@OnSearchFocusOut">
                <i class="fa fa-search h-75"></i>
            </button>
        </div>


        

        @if (showSearchResult)
        {
            <ul class="list-group">

                @foreach (var searchItem in Results)
                {
                    <li class="list-group-item">
                        <a @onclick="(async()=> await GoEntry(searchItem.Id))">
                            @searchItem.Subject
                        </a>
                    </li>
                }
            </ul>
        }

    </div>


    @*  <AuthorizeView>
        <Authorized>
            <div class="top-nav">
                <input type="button" class="form-control btn-success btn-sozluk w-auto" value="Create Entry" @onclick="@NavigateCreateEntryPage" />
                <input type="button" class="form-control btn-success btn-sozluk w-auto" value="ME" @onclick="@NavigateMEPage" />
                <input type="button" class="form-control btn-success btn-sozluk w-auto" value="Logout" @onclick="@NavigateLogoutPage" />
            </div>

        </Authorized>

        <NotAuthorized>
            <div class="top-nav">
                <input type="button" class="form-control btn-success btn-sozluk w-auto" value="Login" @onclick="@NavigateLoginPage" />
            </div>
        </NotAuthorized>

    </AuthorizeView>  *@



    @* // TODO link ver *@

    <div class="sub-nav">
        <a class="sub-nav-item active">bugün</a>
        <a class="sub-nav-item">gündem</a>
        <a class="sub-nav-item">debe</a>
        <a class="sub-nav-item">sorunsallar</a>
        <a class="sub-nav-item">takip</a>
        <a class="sub-nav-item">son</a>
        <a class="sub-nav-item">kenar</a>
        <a class="sub-nav-item">çaylaklar</a>
    </div>


 



</div>

<div class="page">
    <div class="sidebar">

        <h5 class="text-white text-center siderbar-heading">@EntriesSubject</h5>
        <a class="more-data" @onclick="@RefreshEntries">refresh</a>

        <ul class="list-group">
            <EntriesComponent @ref="@entriesComponent" />
        </ul>

    </div>

    <main>
        <div class="top-row px-4">
            <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>






@code
{
    [Inject]
    IEntryService entryService { get; set; }

    List<GetEntriesViewModel> entries = new();

    protected override async Task OnInitializedAsync()
    {
        await RefreshList();
    }


    public async Task RefreshList()
    {
        entries = await entryService.GetEntires();

        StateHasChanged();
    }





    public string EntriesSubject { get; set; } = "bugün";

    private EntriesComponent entriesComponent;

    public string SearchText { get; set; }
    private bool showSearchResult;
    public List<SearchEntryViewModel> Results { get; set; } = new List<SearchEntryViewModel>();

    [Inject]
    NavigationManager navigationManager { get; set; }

    // [Inject]
    // IEntryService entryService { get; set; }

    private async Task RefreshEntries()
    {
        await entriesComponent.RefreshList();
    }

    private void NavigateMEPage()
    {
        navigationManager.NavigateTo("/me");
    }

    private void NavigateLoginPage()
    {
        navigationManager.NavigateTo("/login");
    }

    private void NavigateLogoutPage()
    {
        navigationManager.NavigateTo("/logout");
    }

    private void NavigateCreateEntryPage()
    {
        navigationManager.NavigateTo("/createEntry");
    }




    private async Task SearchKeyDown(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await Search();
        }
    }

    private async Task Search()
    {
        if (string.IsNullOrEmpty(SearchText))
            return;

        Results = await entryService.SearchBySubject(SearchText);

        showSearchResult = true;

        SearchText = string.Empty;
    }

    public async Task OnSearchAsync()
    {
        await Search();
    }

    private async Task OnSearchFocusOut()
    {
        await Task.Delay(100);
        if (showSearchResult)
            showSearchResult = false;
    }

    private async Task GoEntry(Guid entryId)
    {
        await OnSearchFocusOut();
        navigationManager.NavigateTo($"/entry/{entryId}");
    }

}
